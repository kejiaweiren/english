2018-12-10 12:35:26,798 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 3016 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 12:35:26,811 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 12:35:26,916 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 12:35:32,095 INFO (StartupInfoLogger.java:59)- Started EnglishApplication in 7.15 seconds (JVM running for 9.397)
2018-12-10 12:53:41,324 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 9328 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 12:53:41,328 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 12:53:41,331 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 12:53:44,182 INFO (StartupInfoLogger.java:59)- Started EnglishApplication in 3.99 seconds (JVM running for 5.805)
2018-12-10 13:02:41,333 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 4244 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:02:41,339 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:02:41,347 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:03:33,560 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 1728 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:03:33,564 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:03:33,566 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:03:36,473 INFO (StartupInfoLogger.java:59)- Started EnglishApplication in 4.15 seconds (JVM running for 5.954)
2018-12-10 13:03:41,665 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:03:41,687 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:03:41,726 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:04:12,612 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:04:12,613 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:04:12,655 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:04:19,106 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:04:19,107 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:04:19,113 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:04:19,192 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( chinese = ? ) 
2018-12-10 13:04:19,193 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:04:19,195 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:04:28,776 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:04:28,777 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:04:28,779 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:04:28,782 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( chinese = ? ) 
2018-12-10 13:04:28,783 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:04:28,784 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:04:43,568 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:04:43,568 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:04:43,570 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:04:48,154 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( chinese = ? ) 
2018-12-10 13:04:48,157 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:04:48,159 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:05:06,164 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:05:06,165 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:05:06,171 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:06:05,204 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 3400 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:06:05,237 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:06:05,252 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:06:08,285 INFO (StartupInfoLogger.java:59)- Started EnglishApplication in 5.361 seconds (JVM running for 7.125)
2018-12-10 13:06:26,416 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:06:26,436 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:06:26,455 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:06:38,035 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( chinese = ? ) 
2018-12-10 13:06:38,037 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:06:38,040 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:07:04,710 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:07:04,711 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:07:04,714 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:07:11,918 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:07:11,920 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:07:11,923 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:07:15,825 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:07:15,826 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:07:15,829 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:07:22,485 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:07:22,489 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:07:22,497 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:09:00,069 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:09:00,070 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:09:00,074 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:09:36,341 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:09:36,342 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:09:36,344 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:09:40,013 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:09:40,015 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:09:40,019 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:09:40,020 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:09:40,021 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:09:40,022 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:10:17,734 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:10:17,735 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:10:17,740 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:10:53,562 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:10:53,563 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:10:53,565 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:10:53,567 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:10:53,568 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:10:53,569 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:11:05,007 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:11:05,007 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:11:05,009 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:11:05,011 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:11:05,012 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:11:05,014 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:13,288 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:12:13,290 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:12:13,293 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:50,631 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:12:50,632 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:12:50,637 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:50,640 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:12:50,641 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:12:50,643 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:57,689 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:12:57,691 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:12:57,693 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:59,180 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:12:59,181 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:12:59,183 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:12:59,185 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:12:59,186 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:12:59,189 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:14:57,581 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:14:57,582 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:14:57,586 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:14:57,589 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:14:57,591 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:14:57,593 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:14:58,460 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:14:58,461 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:14:58,463 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:15:22,380 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:15:22,381 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:15:22,383 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:17:45,009 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:17:45,010 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:17:45,012 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:17:45,014 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:17:45,015 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:17:45,017 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:19:35,086 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 5560 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:19:35,100 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:19:35,103 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:20:00,284 INFO (StartupInfoLogger.java:50)- Starting EnglishApplicationTests on seari-PC with PID 6380 (started by seari in E:\ideaworkspace\english)
2018-12-10 13:20:00,286 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:20:00,289 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:20:05,763 INFO (StartupInfoLogger.java:59)- Started EnglishApplicationTests in 6.644 seconds (JVM running for 8.401)
2018-12-10 13:22:50,714 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 6116 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:22:50,720 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:22:50,723 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:23:42,913 INFO (StartupInfoLogger.java:50)- Starting EnglishApplication on seari-PC with PID 848 (E:\ideaworkspace\english\target\classes started by seari in E:\ideaworkspace\english)
2018-12-10 13:23:42,918 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.0.RELEASE, Spring v5.1.2.RELEASE
2018-12-10 13:23:42,921 INFO (SpringApplication.java:675)- No active profile set, falling back to default profiles: default
2018-12-10 13:23:45,898 INFO (StartupInfoLogger.java:59)- Started EnglishApplication in 4.118 seconds (JVM running for 5.81)
2018-12-10 13:24:08,094 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:24:08,115 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:24:08,134 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:24:08,180 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:24:08,181 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:24:08,183 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:25:57,130 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:25:57,131 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:25:57,134 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:25:57,141 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:25:57,142 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:25:57,144 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:26:18,133 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:26:18,134 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:26:18,136 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:26:18,138 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:26:18,139 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:26:18,140 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:26:26,890 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:26:26,891 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:26:26,893 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:26:26,894 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:26:26,895 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:26:26,898 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:26:28,604 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:26:28,605 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:26:28,607 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:29:17,567 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:29:17,568 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:29:17,571 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:29:29,941 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:29:29,943 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:29:29,948 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:29:29,951 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:29:29,953 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:29:29,957 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:27,401 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:27,402 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:27,408 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:42,152 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:42,153 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:42,157 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:43,266 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:43,268 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:43,272 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:43,947 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:43,950 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:43,960 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:44,569 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:44,571 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:44,575 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:45,138 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:45,140 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:45,144 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:45,676 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:45,678 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:45,681 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:45,977 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:45,978 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:45,982 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:45,986 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:30:45,987 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:30:45,991 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:46,446 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:46,448 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:46,453 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:46,458 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:30:46,459 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:30:46,466 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:46,708 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:46,709 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:46,710 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:47,210 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:47,212 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:47,216 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:47,890 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:47,891 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:47,894 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:49,057 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:30:49,059 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:30:49,062 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:30:49,065 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:30:49,066 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:30:49,069 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:06,194 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:06,195 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:06,197 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:06,199 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:31:06,200 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:31:06,203 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:07,207 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:07,208 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:07,211 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:07,213 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:31:07,214 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:31:07,216 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:08,714 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:08,716 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:08,719 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:08,723 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:31:08,724 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:31:08,726 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:10,185 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:10,186 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:10,189 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:10,192 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:31:10,193 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:31:10,196 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:11,609 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:11,610 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:11,613 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:14,973 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:31:14,975 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:31:14,978 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:31:14,981 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:31:14,982 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:31:14,985 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:32:32,277 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:32:32,278 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:32:32,280 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:32:32,282 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:32:32,282 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:32:32,284 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:03,295 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:34:03,296 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:34:03,298 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:03,300 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:34:03,301 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:34:03,303 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:11,270 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:34:11,272 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:34:11,275 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:11,970 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:34:11,971 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:34:11,974 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:11,981 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:34:11,983 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:34:11,986 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:12,701 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:34:12,704 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:34:12,707 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:12,711 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:34:12,712 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: cast(String)
2018-12-10 13:34:12,714 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:34:13,276 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:34:13,277 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:34:13,280 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:22,679 INFO (WordController.java:88)- page method: pn:1,word:
2018-12-10 13:35:22,714 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: SELECT count(0) FROM word 
2018-12-10 13:35:22,717 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:35:22,719 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:22,722 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word LIMIT ? 
2018-12-10 13:35:22,722 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 10(Integer)
2018-12-10 13:35:22,723 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2018-12-10 13:35:27,712 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) ) 
2018-12-10 13:35:27,713 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: province ['prɒvɪns](String), province-wide [ˈprɒvɪnsˌwaɪd](String), provincial [prə'vɪnʃ(ə)l](String), provincially [prəu'vinʃəli](String), provinciality [prəʊ,vɪnʃɪ'ælətɪ](String), provincialism [prə'vɪnʃ(ə)lɪz(ə)m](String), victor ['vɪktə](String), victory ['vɪkt(ə)rɪ](String), victorious [vɪk'tɔːrɪəs](String), victoriously [vɪk'tɔriəsli](String), Victorian [vik'tɔ:riən](String), Victorian-era [vik'tɔ:riən-'ɪərə](String), Victorian-style [vik'tɔ:riən-staɪl](String), late-Victorian [[leɪt-vik'tɔ:riən](String), neo-Victorian ['ni:əu-vik'tɔ:riən](String), victim ['vɪktɪm](String), victimless ['vɪktɪmlɪs](String), victimize ['vɪktɪmaɪz](String), victimized ['vɪktɪmaɪz](String), victimization [,vɪktɪmɪ'zeʃən](String), victimizer['vɪktɪmaɪzə](String), convince [kən'vɪns](String), convinced [kən'vɪnst](String), unconvinced [,ʌnkən'vɪnst](String), convincing [kən'vɪnsɪŋ](String), unconvincing [ʌnkən'vɪnsɪŋ](String), convincingly [kən'vɪnsɪŋli](String), unconvincingly [ʌnkən'vɪnsɪŋli](String), convict [kən'vɪkt](String), ex-convict [,eks'kɔnvikt](String), post-conviction [pəust-kən'vɪkʃ(ə)n](String), evict [ɪ'vɪkt](String), eviction [ɪ'vɪkʃ(ə)n](String), evicted [ɪ'vɪktid](String), evince [ɪ'vɪns](String), evincible(String), evincive(String), vincible ['vɪnsɪb(ə)l](String), invincible [ɪn'vɪnsɪb(ə)l](String), invincibility [ɪn,vɪnsə'bɪləti](String)
2018-12-10 13:35:27,714 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:35:27,717 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,719 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: province ['prɒvɪns](String), n. 省；领域；职权【词频3249】【B1M1】(String), 【pro-向前+vinc-征服-占有，统治-管理+e名词后缀】(String), province(String), vinc(String), null, province-wide [ˈprɒvɪnsˌwaɪd](String), adj. 全省的adv. 全省地【词频59028】(String), 【合成词】(String), province(String), vinc(String), null, provincial [prə'vɪnʃ(ə)l](String), adj. 省的；地方性的n. 乡下人；外地人【词频6393，44409】(String), 【province+-i-连字符+-al形容词或名词后缀】(String), province(String), vinc(String), null
2018-12-10 13:35:27,742 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,744 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,745 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: provincially [prəu'vinʃəli](String), adv. 以地方；偏狭地【词频55594】(String), 【provincial+ly副词后缀】(String), province(String), vinc(String), null, provinciality [prəʊ,vɪnʃɪ'ælətɪ](String), n. 乡下习气；粗鄙，偏狭；地方特色【词频57123】(String), 【provincial+-i-连字符+ty名词后缀】(String), province(String), vinc(String), null, provincialism [prə'vɪnʃ(ə)lɪz(ə)m](String), n. 方言；地方风格；乡下习气(String), 【provincial+ism名词后缀，表...主义】(String), province(String), vinc(String), null
2018-12-10 13:35:27,747 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,749 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,749 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victor ['vɪktə](String), n. 胜利者【词频13052】(String), 【-vict-胜利+ -or(高端人士)==-er(低端人士)名词后缀，表人或物(String), victor(String), vict(String), null, victory ['vɪkt(ə)rɪ](String), n. 胜利；成功；克服【词频1467】【B5M5】(String), 【-vict-胜利+ory名词或形容词后缀】(String), victor(String), vict(String), null, victorious [vɪk'tɔːrɪəs](String), adj. 胜利的；凯旋的【词频11883】(String), 【victor+i连字符+ous形容词后缀
danger->dangerous
fame->famous】(String), victor(String), vict(String), null
2018-12-10 13:35:27,752 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,753 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,754 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victoriously [vɪk'tɔriəsli](String), adv. 获胜地；凯旋归来地【词频46679】(String), 【victorious +ly副词后缀】(String), victor(String), vict(String), null, Victorian [vik'tɔ:riən](String), adj. 维多利亚女王时代的n. 维多利亚时代【词频6333，23683】(String), 【Victoria+i连字符+an名词或形容词后缀
Asia->Asian;Africa->African;America->American;Europe->European…】(String), victor(String), vict(String), null, Victorian-era [vik'tɔ:riən-'ɪərə](String), n. 维多利亚时代【词频37086】(String), 【合成词	ear n.时代】(String), victor(String), vict(String), null
2018-12-10 13:35:27,758 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,759 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,760 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: Victorian-style [vik'tɔ:riən-staɪl](String), n. 维多利亚风格【词频38131】(String), 【合成词】(String), victor(String), vict(String), null, late-Victorian [[leɪt-vik'tɔ:riən](String), adj.维多利亚晚期【词频51544】(String), 【合成词】(String), victor(String), vict(String), null, neo-Victorian ['ni:əu-vik'tɔ:riən](String), adj. 新维多利亚的【词频57608】(String), 【neo新	合成词】(String), victor(String), vict(String), null
2018-12-10 13:35:27,763 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,765 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,767 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victim ['vɪktɪm](String), n. 受害者【词频1064】【B4M4】(String), 【-vict-征服-俘虏-罪人-受害者 + -im 名词后缀，表人】(String), victim(String), vict(String), null, victimless ['vɪktɪmlɪs](String), adj. 不侵害他人的，无受害人的（犯罪行为等）【词频33578】(String), 【victim+less形容词后缀，表否定(String), victim(String), vict(String), null, victimize ['vɪktɪmaɪz](String), vt. 使受害；使牺牲；欺骗【词频10957】(String), 【victim+ize动词后缀】(String), victim(String), vict(String), null
2018-12-10 13:35:27,783 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,784 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,785 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victimized ['vɪktɪmaɪz](String), vt. 使受害；使牺牲；欺骗【词频27113】(String), 【victimize+ed形容词后缀，此表过去式和过去分词】(String), victim(String), vict(String), null, victimization [,vɪktɪmɪ'zeʃən](String), n. 牺牲；欺骗【词频10715】(String), 【victimize+-ate+-ion名词后缀==-ation名词(String), victim(String), vict(String), null, victimizer['vɪktɪmaɪzə](String), n. 施害者【词频36500】(String), 【victimize+er名词后缀，表人】(String), victim(String), vict(String), null
2018-12-10 13:35:27,788 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,789 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,790 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: convince [kən'vɪns](String), vt. 说服；使确信【词频2050】(String), 【con-强调，共同+ vinc-征服-使人信服-说服+ e-名词后缀】(String), convince(String), vinc(String), null, convinced [kən'vɪnst](String), adj. 确信的，信服的【词频3742】【X8M4】(String), 【convince+ed形容词后缀】(String), convince(String), vinc(String), null, unconvinced [,ʌnkən'vɪnst](String), adj. 不信服的；怀疑的【词频20482】(String), 【un-否定+convinced】(String), convince(String), vinc(String), null
2018-12-10 13:35:27,792 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,793 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,794 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: convincing [kən'vɪnsɪŋ](String), adj. 令人信服的；有说服力的【词频6217】(String), 【convinc+ing形容词后缀，表令...的】(String), convince(String), vinc(String), null, unconvincing [ʌnkən'vɪnsɪŋ](String), adj. 不足以令人相信的【词频25204】(String), 【un-否定+convincing】(String), convince(String), vinc(String), null, convincingly [kən'vɪnsɪŋli](String), adv. 令人信服地；有说服力地【词频14175】(String), 【convincing+ly副词后缀】(String), convince(String), vinc(String), null
2018-12-10 13:35:27,797 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,798 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,799 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: unconvincingly [ʌnkən'vɪnsɪŋli](String), adv. 缺乏说服力地；无法令人信服地【词频40853】(String), 【un-否定+convincingly】(String), convince(String), vinc(String), null, convict [kən'vɪkt](String), n. 囚犯vt. 证明…有罪；宣告…有罪【词频3706，12076】【X7M3】(String), 【con-强调+ -vict-征服-俘虏-囚犯;宣告...有罪】(String), convict(String), vict(String), null, ex-convict [,eks'kɔnvikt](String), n. 从前曾被判刑的人；[法] 前科犯【词频31790】(String), 【ex-前任+convict(String), convict(String), vict(String), null
2018-12-10 13:35:27,802 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,803 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,804 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: post-conviction [pəust-kən'vɪkʃ(ə)n](String), n. 定罪后【词频47805】(String), 【post-后+conviction】(String), convict(String), vict(String), null, evict [ɪ'vɪkt](String), vt. 驱逐；逐出【词频12684】(String), 【e-向外+-vict-征服-占领-驱逐】(String), evict(String), vict(String), null, eviction [ɪ'vɪkʃ(ə)n](String), n. 逐出；赶出；收回【词频16890】(String), 【evict+ion名词后缀】(String), evict(String), vict(String), null
2018-12-10 13:35:27,806 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,807 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,808 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: evicted [ɪ'vɪktid](String), adj. 被驱逐的【词频54954】(String), 【evict+ed形容词后缀】(String), evict(String), vict(String), null, evince [ɪ'vɪns](String), vt. 表明，表示；引起【词频19431】(String), 【e向外+-vinc-胜利--表明，显示+e动词后缀】(String), evince(String), vinc(String), null, evincible(String), 可表明的(String), 【evince+ible形容词后缀】(String), evince(String), vinc(String), null
2018-12-10 13:35:27,826 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,827 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) , (?,?,?, ?,?,?) , (?,?,?, ?,?,?) 
2018-12-10 13:35:27,829 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: evincive(String), adj. 显示的；证明性的；表明的(String), 【evince+ive形容词后缀】(String), evince(String), vinc(String), null, vincible ['vɪnsɪb(ə)l](String), adj. 可征服的，易克服的(String), 【vinc征服+-ible=able，形容词后缀，表能...的】(String), vincible(String), vinc(String), null, invincible [ɪn'vɪnsɪb(ə)l](String), adj. 无敌的；不能征服的【词频15520】(String), 【in-否定+vincible】(String), vincible(String), vinc(String), null
2018-12-10 13:35:27,858 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 3
2018-12-10 13:35:27,859 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: INSERT INTO word(word, chinese,note,coreword,root,sentence) values (?,?,?, ?,?,?) 
2018-12-10 13:35:27,859 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: invincibility [ɪn,vɪnsə'bɪləti](String), n. 无敌；不可战胜【词频28489】(String), 【invincible+i连字符+ty名词后缀，常用复合后缀，-ible+-i-+-ty=l和e交换=ibelity->然后e变i加ty=-ibility==-ability】(String), vincible(String), vinc(String), null
2018-12-10 13:35:27,862 DEBUG (BaseJdbcLogger.java:159)- <==    Updates: 1
2018-12-10 13:35:29,178 INFO (WordController.java:88)- page method: pn:1,word:
2018-12-10 13:35:29,180 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: SELECT count(0) FROM word 
2018-12-10 13:35:29,180 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:35:29,181 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:29,182 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word LIMIT ? 
2018-12-10 13:35:29,182 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 10(Integer)
2018-12-10 13:35:29,184 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 10
2018-12-10 13:35:32,613 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:35:32,613 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:35:32,615 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:32,617 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:35:32,617 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: province(String)
2018-12-10 13:35:32,619 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:35:39,112 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:35:39,114 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:35:39,116 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:39,118 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:35:39,120 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: province(String)
2018-12-10 13:35:39,121 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:35:39,866 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:35:39,867 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:35:39,870 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:35:39,872 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:35:39,873 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: convince(String)
2018-12-10 13:35:39,875 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2018-12-10 13:36:01,538 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:36:01,539 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:36:01,541 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:36:01,543 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:36:01,544 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victor(String)
2018-12-10 13:36:01,546 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:36:13,061 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:36:13,063 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:36:13,066 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:36:13,074 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:36:13,075 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: vincible(String)
2018-12-10 13:36:13,078 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:01,026 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:37:01,027 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:37:01,029 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:02,165 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:37:02,165 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:37:02,166 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:06,162 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:37:06,164 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:37:06,168 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:06,173 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:37:06,174 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: province(String)
2018-12-10 13:37:06,176 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:20,988 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select * FROM `word` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `word`)-(SELECT MIN(id) FROM `word`))+(SELECT MIN(id) FROM `word`)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1; 
2018-12-10 13:37:20,990 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2018-12-10 13:37:20,991 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2018-12-10 13:37:20,993 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, word, chinese, root, coreword, sentence, note from word WHERE ( word = ? ) 
2018-12-10 13:37:20,993 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: victor(String)
2018-12-10 13:37:20,995 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
